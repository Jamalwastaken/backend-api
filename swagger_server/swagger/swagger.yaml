openapi: 3.0.3
info:
  title: Task manager- OpenAPI 3.0
  description: |-
    Simple task manager

    Some useful links:
    - [The task Store repository](https://github.com/swagger-api/swagger-petstore)
    - [The source API definition for the task Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
- url: https://petstore3.swagger.io/api/v3
tags:
- name: task
  description: Operation with task
- name: user
  description: Operations about user
paths:
  /task:
    post:
      tags:
      - task
      summary: Add a task
      description: Add a task
      operationId: add_task
      requestBody:
        description: Create a new task
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
          application/xml:
            schema:
              $ref: '#/components/schemas/Task'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Task'
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
            application/xml:
              schema:
                $ref: '#/components/schemas/Task'
        "400":
          description: Invalid input
        "422":
          description: Validation exception
      security:
      - api_key:
        - write:tasks
        - read:tasks
      x-openapi-router-controller: swagger_server.controllers.task_controller
  /task/findByStatus:
    get:
      tags:
      - task
      summary: Finds Task by status
      description: Multiple status values can be provided with comma separated strings
      operationId: find_tasks_by_status
      parameters:
      - name: status
        in: query
        description: Status values that need to be considered for filter
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: incompleted
          enum:
          - incompleted
          - completed
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
                x-content-type: application/json
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
        "400":
          description: Invalid status value
      security:
      - api_key:
        - write:tasks
        - read:tasks
      x-openapi-router-controller: swagger_server.controllers.task_controller
  /task/{taskId}:
    get:
      tags:
      - task
      summary: Find task by ID
      description: Returns a single task
      operationId: get_task_by_id
      parameters:
      - name: taskId
        in: path
        description: ID of task to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
            application/xml:
              schema:
                $ref: '#/components/schemas/Task'
        "400":
          description: Invalid ID supplied
        "404":
          description: Task not found
      security:
      - api_key: []
      - api_key:
        - write:tasks
        - read:tasks
      x-openapi-router-controller: swagger_server.controllers.task_controller
    put:
      tags:
      - task
      summary: Updates a task
      description: ""
      operationId: update_task
      parameters:
      - name: taskId
        in: path
        description: ID of task that needs to be updated
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        description: update a task
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
      responses:
        "400":
          description: Invalid input
      security:
      - api_key:
        - write:tasks
        - read:tasks
      x-openapi-router-controller: swagger_server.controllers.task_controller
    delete:
      tags:
      - task
      summary: Deletes a task
      description: delete a task
      operationId: delete_task
      parameters:
      - name: taskId
        in: path
        description: Task id to delete
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "400":
          description: Invalid task value
      security:
      - api_key:
        - write:tasks
        - read:tasks
      x-openapi-router-controller: swagger_server.controllers.task_controller
  /task/{taskId}/subtask:
    get:
      tags:
      - task
      summary: Find subtask list
      description: Returns a list of tasks
      operationId: getsub_task_by_id
      parameters:
      - name: taskId
        in: path
        description: ID of task to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
                x-content-type: application/json
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
        "400":
          description: Invalid ID supplied
        "404":
          description: Task not found
      security:
      - api_key: []
      - api_key:
        - write:tasks
        - read:tasks
      x-openapi-router-controller: swagger_server.controllers.task_controller
  /task/{taskId}/collaborator:
    get:
      tags:
      - task
      summary: Find task collaborators
      description: Returns a list of collaborators
      operationId: get_task_collaborators
      parameters:
      - name: taskId
        in: path
        description: ID of task to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
                x-content-type: application/json
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        "400":
          description: Invalid ID supplied
        "404":
          description: Task not found
      security:
      - api_key: []
      - api_key:
        - write:tasks
        - read:tasks
      x-openapi-router-controller: swagger_server.controllers.task_controller
    post:
      tags:
      - task
      summary: Add a collaborator
      description: Add a collaborator
      operationId: add_collaborator
      parameters:
      - name: taskId
        in: path
        description: ID of task to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        description: Add a collaborator
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Collaborator'
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
            application/xml:
              schema:
                $ref: '#/components/schemas/Task'
        "400":
          description: Invalid input
        "422":
          description: Validation exception
      security:
      - api_key:
        - write:tasks
        - read:tasks
      x-openapi-router-controller: swagger_server.controllers.task_controller
  /task/{taskId}/collaborator/{userId}:
    delete:
      tags:
      - task
      summary: Delete a collaborator
      description: Delete a collaborator
      operationId: delete_collaborator
      parameters:
      - name: taskId
        in: path
        description: ID of task to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: userId
        in: path
        description: ID of collaborator to remove
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: Successful operation
        "400":
          description: Invalid input
        "422":
          description: Validation exception
      security:
      - api_key:
        - write:tasks
        - read:tasks
      x-openapi-router-controller: swagger_server.controllers.task_controller
  /user:
    post:
      tags:
      - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: create_user
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
      x-openapi-router-controller: swagger_server.controllers.user_controller
  /user/login:
    get:
      tags:
      - user
      summary: Logs user into the system
      description: ""
      operationId: login_user
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              style: simple
              explode: false
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              style: simple
              explode: false
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
                x-content-type: application/xml
            application/json:
              schema:
                type: string
        "400":
          description: Invalid username/password supplied
      x-openapi-router-controller: swagger_server.controllers.user_controller
  /user/logout:
    get:
      tags:
      - user
      summary: Logs out current logged in user session
      description: ""
      operationId: logout_user
      parameters: []
      responses:
        default:
          description: successful operation
      x-openapi-router-controller: swagger_server.controllers.user_controller
  /user/{username}:
    get:
      tags:
      - user
      summary: Get user by user name
      description: ""
      operationId: get_user_by_name
      parameters:
      - name: username
        in: path
        description: 'The name that needs to be fetched. Use user1 for testing. '
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
      x-openapi-router-controller: swagger_server.controllers.user_controller
    put:
      tags:
      - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: update_user
      parameters:
      - name: username
        in: path
        description: name that need to be deleted
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
      x-openapi-router-controller: swagger_server.controllers.user_controller
    delete:
      tags:
      - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: delete_user
      parameters:
      - name: username
        in: path
        description: The name that needs to be deleted
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
      x-openapi-router-controller: swagger_server.controllers.user_controller
components:
  schemas:
    Task:
      type: object
      properties:
        task_id:
          type: integer
        title:
          type: string
        description:
          type: string
        start_date:
          type: string
          format: date-time
        end_date:
          type: string
          format: date-time
        completed_at:
          type: string
          format: date-time
        author_id:
          type: integer
      example:
        end_date: 2000-01-23T04:56:07.000+00:00
        completed_at: 2000-01-23T04:56:07.000+00:00
        description: description
        task_id: 0
        title: title
        author_id: 6
        start_date: 2000-01-23T04:56:07.000+00:00
    User:
      type: object
      properties:
        user_id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: "12345"
      example:
        password: "12345"
        user_id: 10
        email: john@email.com
        username: theUser
    Collaborator:
      type: array
      description: collaborator id for a task
      items:
        $ref: '#/components/schemas/Collaborator_inner'
    Collaborator_inner:
      type: object
      properties:
        user_id:
          type: integer
  requestBodies:
    Task:
      description: Task object that needs to be added
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Task'
        application/xml:
          schema:
            $ref: '#/components/schemas/Task'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    api_key:
      type: apiKey
      name: api_key
      in: header
      x-apikeyInfoFunc: swagger_server.controllers.authorization_controller.check_api_key

